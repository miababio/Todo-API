                                    NOTES
                                    -----
                                    
Installing Postman
    - Make API requests quickly, so you don't have to keep typing URLs and whatnot
    - Requires Chrome for extension (unless you do standalone app I think)
    
Getting All TODOs
    - For this project, a TODO will be a Model
        - An individual unit that you can have multiple of
        - Contains an id, description, and completion
    - Multiple TODOs will be called a "TODO Collection"
        - All of our TODOs
    - Need a way to get all of our todos:
        - Use a GET request
        - GET <url>
            - Common syntax
            - In this case -> Get /todos
    - Get an individual TODO
        - GET /todos:id
            - Represents a variable that will be passed in
        - This is where ID comes in
    - GET example
        - app.get("/todos", function(req, res) {
              res.json(todos);
          });
          
          - Need to convert our todos array/objects into JSON first
          - Use the .json(<what you want to convert>) method
          - That way, when someone calls our API, it gives them back JSON data
          
    - GET all todos + Postman
        - See Example 1
        - In Postman, after you get results, you see it also returned with a Staus (200 OK)
            - Statuses are always returned with HTTP reuquests
            - Ex: 404 (Page not found)
        - Postman also gives you the time it took to do the request
    - To speed the process up:
        - Save your request into a Collection
            - For Request name, it helps to put the actual request
            - For Collection -> Todo API
            
Get Todo By ID
    - GET /<plural version of whatever>:id
        - We're using :id because that's how Express parses the indivdual data 
        
    - Ex: app.get("/todos/:id", function(req, res) {
             res.send(`Asking for todo with ID of ${req.params.id}`); 
          });
            
        - req.params = parameters of the request, with "id" being one of them
        - In Postman, to se this in action, you could type -> http://localhost:3000/todos/3
            - This returns "Asking for todo with ID of 3"
        - This is neat because you can essentialy put anything after the slash
            - Ex: http://localhost:3000/todos/Mike, http://localhost:3000/todos/9999
        - Express takes whatever value that's after the slash, and lets me access that through req.params
        
    - Get individual ID and send it to Postman
        - See Example 2
        - res.status(<enter number here>).send(); is from Express
    - NOTE: todos[i].id === todoID
        - req.params.whatever will always return a STRING
            - This is why === didn;t work before. You were trying to check a number against a string, and === is strict checking
            
Postman Environments
    - 

                                  Examples
                                  --------
                            
Example 1 - GET all todos (show in Postman)
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}];

app.get("/", function (req, res) {
    res.send("Todo API Root");
});

// GET /todos
app.get("/todos", function(req, res) {
    res.json(todos);
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a GET request
    - Type in "http://localhost:3000/todos"
    - Hit Send and see results
        - Should display your todos neatly
        
        
Example 2 - Get individual TODO, send to Postman
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}, {
    id: 3,
    description: "Finish this video",
    completed: true
}];

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});


Example 3 -
---------
