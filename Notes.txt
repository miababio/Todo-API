                                    NOTES
                                    -----
                                    
Installing Postman
    - Make API requests quickly, so you don't have to keep typing URLs and whatnot
    - Requires Chrome for extension (unless you do standalone app I think)
    
Getting All TODOs
    - For this project, a TODO will be a Model
        - An individual unit that you can have multiple of
        - Contains an id, description, and completion
    - Multiple TODOs will be called a "TODO Collection"
        - All of our TODOs
    - Need a way to get all of our todos:
        - Use a GET request
        - GET <url>
            - Common syntax
            - In this case -> Get /todos
    - Get an individual TODO
        - GET /todos:id
            - Represents a variable that will be passed in
        - This is where ID comes in
    - GET example
        - app.get("/todos", function(req, res) {
              res.json(todos);
          });
          
          - Need to convert our todos array/objects into JSON first
          - Use the .json(<what you want to convert>) method
          - That way, when someone calls our API, it gives them back JSON data
          
    - GET all todos + Postman
        - See Example 1
        - In Postman, after you get results, you see it also returned with a Staus (200 OK)
            - Statuses are always returned with HTTP reuquests
            - Ex: 404 (Page not found)
        - Postman also gives you the time it took to do the request
    - To speed the process up:
        - Save your request into a Collection
            - For Request name, it helps to put the actual request
            - For Collection -> Todo API
            
Get Todo By ID
    - GET /<plural version of whatever>:id
        - We're using :id because that's how Express parses the indivdual data 
        
    - Ex: app.get("/todos/:id", function(req, res) {
             res.send(`Asking for todo with ID of ${req.params.id}`); 
          });
            
        - req.params = parameters of the request, with "id" being one of them
        - In Postman, to se this in action, you could type -> http://localhost:3000/todos/3
            - This returns "Asking for todo with ID of 3"
        - This is neat because you can essentialy put anything after the slash
            - Ex: http://localhost:3000/todos/Mike, http://localhost:3000/todos/9999
        - Express takes whatever value that's after the slash, and lets me access that through req.params
        
    - Get individual ID and send it to Postman
        - See Example 2
        - res.status(<enter number here>).send(); is from Express
    - NOTE: todos[i].id === todoID
        - req.params.whatever will always return a STRING
            - This is why === didn't work before. You were trying to check a number against a string, and === is strict checking
            
Postman Environments
    - Will let you create multiple environments so you can test code on your local server, as well the the Heroku app
    - Hit the gear icon next to Environments
        - Click Add
        - There you can add a keyword (environment variable) and give it a value (key/value)
            - Ex: Key: apiUrl, Value: http://localhost:3000
    - Once added, you can use the environment variables to test your requests, instead of having to go up and switch the url back and forth like before
        - Ex: GET http://localhost:3000/todos now becomes -> GET {{apiUrl}}/todos
    - To use the environment variable, you surround it in curly braces
        - {{<environment_variable_here>}}

Creating New Todos
    - Going to let users add their own todos through the API
        - using the POST request
    - POSTs is different than GETs
        - POST can take data (such as todo descriptions, todo completion status)
        - This let's us send a JSON object with out request, so when the server receives the request, it can directly add that JSON data to the todos array
        
    - app.post("/todos", function(req, res) {
    
      });
      
        - We're going to have acces to whatever data was sent with the request. To handle it, need to install body-parser(npm)
            - Version 1.13.3, latest is 1.15.2
            
    - app.use(bodyParser.json());
    
        - This let's us use what ever JSON gets sent in the request
            - using req.body
    - See Example 3
        - Basically, takes the data we entered and spits it back out
    - Create a new todo item using the REST API
        - See Example 4
    - Note there are things wron with the code:
        - No Validation: Anything can be added to the todos array at this point
        - No checking completion status: Whether data was added successfully or not
        - Error handling?
        - Will these EVER get solved?!?!?
            - Tune in next time...
            
Refactoring with Underscore
    - (push to heroku when you get home)
    - Utility library that let's us manage objects, arrays, etc. better
        - Functional programming methods and whatnot (find, filter, map, etc)
    - Using current version (1.8.3)
        - Side Note: Adding '^' before a version in package.json indicates that when you fetch your modules from npm, it will only update to a newer version if it's a minor update.
            - Ex: ^1.8.3
                - If 1.8.4 came out, package.json would update to that
                - If 2.1.5 came out (major change), package.json would NOT update to that
    - Most use the "_" character to use the underscore variable
        - var _ = require("underscore");
    - Use underscore to refactor our current methods of getting todos by ID, and posting todos
    - See Example 5
    - We're also using underscore to add validation when creating and posting todos
        - See Example 6
    - Still getting the issue that we can POST whatever data we want to the todos
        - Ex: In postman, type:
        
            {
                "description": "Visit family and friends",
                "completed": true,
                "hack": "Some bad data"
            }
            
              and it's valid!

Underscore Challenge
    - How to get rid of data we don't want?
        - Use the pick() method (from Underscore library)
        - pick(<object>, <key(s) you want to accept (string)>)
            - Returns a copy of the same object, except filtered to only show the values you whitelisted as keys
            - Ex: var body = _.pick(req.body, "description", "completed");      

Deleting Todos By ID
    - Using the DELETE api method
        - app.delete(<url> <callback_function(req, res){} )
    - See Example 7
    - Similar to what we did with GET (getting a todo by ID)
    - push to heroku
    
Updating Todos
    - Use the PUT method
        - Similar setup to POST
    - We don't necessarily have to check if the todo exists, BUT if it does, we have to make sure it meets certain standards
    - Using the method "hasOwnProperty" helps chack for validation that a property exists
        - Ex: body.hasOwnProperty("completed") // Checks to see if this property exists
            - Returns a boolean
    - Using the extend(<dest>, <source>) method to copy/overwrite one object to another
        - Ex: _.extend(matched, validAttributes);
    - See Example 8
    
Passing Variables By Reference

    - var person = {
        name: "Mike",
        age: 21
      };

      function updatePerson(obj) {
        obj = {
            name: "Mike",
            age: 23
        };
      }

      updatePerson(person);
      console.log(person);
      
       - In the console, person outputs as { name: 'Mike', age: 21 }
       - age wasn't updated because we're setting value = something within the function
       - To update the info in person, we need to mutate it, or actually manipulate the data itself (reference)
       - Ex:
      
           function updatePerson(obj) {
             obj.age = 23;
           }
      
          - Here was aren't assigning a new variable to obj, which made us lose the reference before
          - Calling something from the original variable changes the value
          
    - Array Example
        - See Example 9
        
    - Debugging
        - You can use the "debugger" keyword to activate Node's debugger
        - Put "debugger" in your code to have the debugger stop on that line (like a breakpoint)
        - You debug using the Terminal
            - To start debugging, type "node debug <file you want to debug>"
                - Ex: node debug variable-playground.js
            - In the terminal
                - debugger stops on first line that isn't commented out code
                - use "cont" -> continue in code
            - Say we wanted to check the status of a variable
                - While debugging, type "repl" to enter debug repl
                    - Can use this area to inspect/check on variables w/in the program
                    - Ex: try typing gradesArr
                        - displays [15, 37, 99]
                    - You can also modify the variable directly
                        - Ex: gradesArr.push(11) // displays 4 (4 values in array now)
                              gradesArr          // displays [15, 37, 99, 11]
                    - To Exit debug repl, hit Ctrl + C
                - To stop debugging the program (but still be in Debug mode), type "kill" in the terminal
                - To quit debug mode, type "quit" in the terminal
                    
Filtering By Todo Completed Status
    - Right now, we can't search a task by its text (description, etc)
    - Right now, we can return/filter a task by its completion status (can't get just not completed ones)
    
    Let's fix that now, shall we? ;-)
    
    - Query Parameters
        - Comes at the end of your URL
        - It's the '?' followed by a query
        - Key,value pair
        - Can have multiple queries with the '&'
            - Ex: {{apiUrl}}/todos?key=value&a=b&completed=true
        - Ex: {{apiUrl}}/todos?completed=true
        - You can access the query parameter by the request object in your route's callback
            - Doesn't have to be in the get URL
            - Ex: var queryParams = req.query
                - Similar to req.body, req.params
        - Using the .where(<array you want to check>, <what to search by (object)) method (underscore)
            - Similar to findWhere, except this returns an array containing ALL matches
        - See Example 10
        - push to heroku
        
Searching By Todo Description
    - Using the "q" parameter
    - See Example 11
    
SECTION 7 - Working with a Real Database
----------------------------------------
Installing Sequelize and Sqlite3
    - Both npm modules
    - Sequelize -> version 3.5.1, I can only get 3.27.0 (3.5.1 doesn't exist anymore?)
    - Sqlite3 -> version 3.0.10, latest is 3.1.8 (using latest)
        - Need to figure out how to work. updated both node-gyp and node-pre-gyp
        - Downloaded source and tried to build it, didnt work
        - tried npm install without the version, didnt work
        - downloaded source and tried installing from source folder
        - For now, works at home, so just copy it
        
    - Sequelize let's you manage your data as javascript objects/arrays, and does all the heavy lifting in between to convert them to SQLite calls to your database
        - Works across multiple databases (MySQL, MariaDB, PostgresSQL, etc.)
    - Small sequelize example
        - See Example 12
    
    - var sequelize = new Sequelize(undefined, undefined, undefined, <object>);
        - have to create a new instance of Sequelize to use it
    
    - sequelize.sync().then(function() {
         console.log("Everything is synced");
      });
        - sync() returns a Promise, which is why we can use the then() method after
        - calling sync() syncs your objects you set up, and creates a database like them
    - To define a model -> sequelize.define(<model name>, <attribute configuration>)
        - This is equivalent to using SQL statements to create each model (create table BLAHBLAH VARCHAR(10), etc..)
        - MUCH easier/faster instead of trying to to complex SQL statements and whatnot
    - Adding an entry to our table
        - See Example 13
            - create() also returns a Promise, which is why we can use the then() method after
            - If you try logging the Todo in Command Prompt, you get a whole bunch of data back
            - Scroll up to see what was actually inserted into the table
                - Other than ID, our description and completed field was added
                - Sequelize also gives us a createdAt and updatedAt field for convenience
                    - Optional, but its recommended to leave them on 
    - To view our database
        - Install SQLite DB Browser (google it)
        - Once open, open your database
        - Click "Browse Data" tab
        - Select "todos" from Tables dropdown
        
Adding Model Validation & Fetching Models
    - Multiple way to validate using sequelize
    - One way -> allowNull
        - Put that in a field to ensure you have to provide that field (like in SQL)
    - Other validations can go in a "validate" object
        - Ex: "notEmpty" -> Prevents you from inputting an empty string as valid input
        - Ex: var Todo = sequelize.define('todo', {
                 description: {
                 type: Sequelize.STRING,
                 allowNull: false,
                 validate: {
                    notEmpty: true
                 }   
              }});
              
    - How to fetch data from the database
        - Use the findById(<id>) method
            - Ex: Todo.findById(1);
            - If found, make it pretty by using JSON -> console.log(todo.toJSON());
        - Another way is to use the findAll(<object with conditions>) method
            - Gets all results that match the condition (like in SQL - seeing a pattern yet?)
            - returns results as an array
            
            - Ex: return Todo.findAll({
                     where: {
                         completed: false
                     }
                  });
            - Can take things a step further and search for words within a string, say, the description for example
                - Using the "$like" keyword 
            
            - Ex: return Todo.findAll({
                     where: {
                         description: {
                            $like: "%trash%"
                         }
                     }
                  });
                  
                - Aren't you glad you took those Database/VB classes now?
        - Extreme example of sequelize features
            - See Example 14
            
Project: POST /todos
    - created 'data' folder
        - will house our sqlite database stuff
    - import(<path to file>) method -> let's you import Sequelize models from other files
        - in the other file:
            - do a module.exports = function(sequelize, DataTypes)
            - do sequelize.define(...){...} like before
                - difference: instead of Sequelize.STRING, etc., do DataTypes.STRING, etc.
                - DataTypes has everything Sequelize does
    - New way to POST using database
        - See Example 15
    - One more thing: we dont wanna commit our sqlite file
    - To unstage a file, you can use
        - git reset HEAD data/dev-todo-api.sqlite
        - Since it's also in .gitignore, it gets ignored

Project: GET /todos/:id
    - See Example 16
    - todo !== null?
        - Could also do -> !!todo
            - Makes the object its actual boolean value (instead of "truth-y"/"false-y")
            - Ex: var todo = null; // todo is falsy, because null is "falsy" by default
                  var isboolean = !!todo // it now equals false

Project: GET /todos
    - See Example 17
    - If you made a mistake and committed, but haven't pushed, you can run:
        - git --amend -am "<same message>"
            - merges the two commits together and acts like it was one
            
Postgres on Heroku
    - First, we need to add an addon to heroku app (postgres)
        - command line -> heroku addons: create heroku-postgresql:hobby-dev
            - Creates free tier of postgresql
        - To test if database works, type "heroku pg:wait"
            - causes the database to wait till it's finished
        - To help convert our code to work with postgres, we need 2 new modules
            - pg, version 4.4.1; Current is 6.1.2
            - pg-hstore, version 2.3.2 (also current :D)
    - To determine whether we use SQLite or Postgres, we will use Node's Evnironment Variables
        - Environment Variables: Special variables that determine where Node is running
        - In this case, we want to use Postgres when Node is running in PRODUCTION; If not, then SQLite
        - With the heroku addon, we also got the DATABASE_URL environment variable, which stores our connection info
        - Environment variables are strings
        - See Example 18

Project: DELETE /todos/:id
    - See Example 19
    - Deploy to heroku
    
PUT /todos/:id
    - So far, we've been using methods from Model
    - Now, we want to use instance methods for this to work
        - instance methods: Methods that are used from an instance variable
            - Ex (Java): Scanner scanner = new Scanner();
                         scanner.next(); <-- instance method
    - Use the update() method
        - update(<object of attributes you want to update>) 
        - Ex: return todo.update(attributes)
        
    - See Example 20
    - push to heroku
    
SECTION 8 - Adding Authentication
---------------------------------
Creating the User Model
    - Added user.js
        - Similar setup to todo.js
    - Linking new user database (by making POSTs)
        - See Example 21
    
Using Sequelize Hooks for Validation
    - Problem in the security
        - Passwords in plaintext (will fix later)
        - If you go to Postman
            - email: michael@example.com and Michael@example.com are DIFFERENT!
                - It currently accepts both because email doesn't look at capitalization
    
    - Solution to fix this -> Hooks
        - Hook: Let's you run code before or after a certain event happens
            - Can be creation, validation, destroying something, etc.
        - We'll use the "beforeValidate" hook to fix our issue
            - beforevalidate: function(<model>, options)
            - Ex: beforevalidate: function(user, options) {user.mood = "happy"}
        - Three ways to define a hook, but the way we're doing it is in the define() method in user.js
            - for beforeValidate, we'll make the email all lowercase, so we won't have to worry abou case sensitivity
        - See Example 22
        
Hashing and Salting Passwords
    - Goal is to store a hashed password in our databse instead of the plaintext (toldya we'd fix it!)
    - New npm module -> bcrypt
        - NOTE: bcrypt requires Python installed. There's also been other comments of user's not getting it to work on Windows 10. So instead, it's recommended to use bcryptjs
    - bcryptjs -> version 2.4.0 (also the latest)
        - This lets us use hashing algorithms
        - Different than before. For passwords, we encrypted/decrypted them using keys
        - Hashing is one-way, meaning that once you hash a string (say, "abc123"), you get a hash back. Once you have that,
                     -------
        there's no way to take that hash and turn it back into "abc123"
        - The key to this is that, the string "abc123" should always produce the same hash
    - user.js -> adding salt and password_hash properties
        - salt: When hashing data, you get the same result everytime, so if two people had the same password for example, just looking at the hash value could tell you that you have the same password. What salt does is that it adds some random characters to the plaintext password before it's hashed. That way, when the password is hashed, the resulting hash is different. In order to figure out the password, someone would have to try all password combinations with the same salt in order to get it, and that could take literally FOREVER.
        
        - password -> now use DataTypes.VIRTUAL
            - VIRTUAL types don't get stored i nthe database, but they are still accessible
            - Means we could set a password for our user object, and it will never be stored in the database 
                - This is nice because we can override when we set the password; When we set the plaintext password, we want to salt it, and then hash it
        - See Example 23
            - this.SetDataValue(<string of property>, <value you want to set it to>)
                - setDataValue lets you set a value for a property for you current instance of user
                    - Similar to setting variables using "this" in Java if it helps you think of it that way
            - The salt contains 29 characters
                - First 7: Display how many salt rounds were done (between the three $ signs)
                - Next 22 characters: the actual salt value
    - Things are working great! Except...
        - We're shoing fields we don't want the user to see! (password, salt, password_hash)
        - We need to hide these!
        - We'll use an instance method again
            - If you forgot, that's just a fancy way of saying a method invoked by a user instance
        - See Exmaple 24
        
Log in users (POST /users/login)
    - Create a new Route in Express for logging in (POST /users/login)
        - Will take an email and a password
    - Use the compareSync() method to compare the plaintext password with the hashed password
        - Ex: bcrypt.compareSync(body.password, user.get("password_hash"))
            - The get(<property as string>) method gets the value of a property you have defined in an object
    - See Example 25
    - P.S. -> You can remove the Salt column from the database if you want. Bcrypt has the salt supported in the hash, so there's no need to keep the salt there. Some hash algolrithms don't have the salt supported, which is why sometimes you'd want a coulmn for the salt. However, in this case, you don't.
    
Custom Sequelize Class Methods
    - We've added a bit of code into the express functions to get the login working
        - Want to make it as small as possible. Soo....time to refactor!!
    - We want to move our code in the User model (user.js)...but how?
        - Custom method in Sequelize
        - We'll create a Class Method (instead of an instance method)
            - This let's us do for example, db.user.authenticate(body)
    - See Example 26

Generating a JWT (JSON Web Token) for Authentication (Auth Token)
    - When we make a successful login request, we want to generate an Authentication Token for that user, so that they can create/update/delete their own todos, and without seeing or messing anyone else's todos
    - For now, we're going to generate an Auth Token and get a custom header back when we do a POST request for users
        - users.js -> Create a new instance method to handle the generation
            - It's an instance method vs a class method because we only want to affect the current user. When we do a POST request on users/login, we have a user as an arguement (see function POST /users/login)
        - Install 2 new npm modules
            - jsonwebtoken
                - Using 5.0.5; Current is 7.3.0
            - crypto-js (used before in password manager section)
                - Using 3.1.5; Latest is 3.1.9-1
        - See Example 27
            - var stringData = JSON.stringify({id: this.get("id"), type: type});
            
                - Takes user's id and type, and turns in into a JSON string
                - We need a string because AES.encrypt only does strings
                - We use 'this.get' to get a value from our current instance user
                    - Think of this like in Java doing this.id or this.something; same concept

Making Todo Routes Private (Creating Custom Middleware)
    - Now we will move our todo items to be private and require the JWT token to be set
    - Our login token will have to be set as the header before we can make any todo rquests
    - In order to intercept the token before we do anything, we'll make some custom middleware before we make the todos private
    - First, we create middleware.js
        - This is where we'll put all our middleware code
        - You'll notice that when creating our middlewate functions, there's an extra parameter -> function(req, res, next)
            - Middleware code is run before our regular code (app.get, function() ..., app.post, etc.)
            - After you call the 'next' argument, then the regular code gets exectued
                - If you don't call the 'next' at all, then the private code does not run
            - This is what we'll use to make our Todo routes private
        - See Example 28
    - Test new stuff in Postman
        - In the Headers tab, add "Auth" for header, and "{{authToken}}" for Value
        - Manage the Todo API Local environment and copy/past the Auth token into there
    - Now the next thing we need to do is seperate the data, so that individual users oonly see their own todos
        - Right now when I log in, I can see anybody's todos

Playing With Associations
    - Assosciations let's you assoiciate data with certain other data (gasp)
    - In our case, we want a user to have a todo, and a todo to belong to a certain user
        - We want to know who created what todo, so that they can edit it
    - We'll use sequelize to set up the associations
    - There's only a few ways to do it using this method
        - One-to-One Association
        - One-to-Many Association
        - Many-to-Many Association
    - We'll use the One-to-Many Association for this; A user can have many todos, and many todos can belong to one user
    
    - Todo.belongsTo(User);
      User.hasMany(Todo);
    
        - User = model that the todo belongs to
        - Using these two lines, Sequelize adds a foreign key between the User and Todo tables
        
    - If you run the code and open DB browser and look at the sqlite file, you'll notice that the todos table has an extra column labeled "userId" at the end. That is the foreign key provided by sequelize that links the todo with a user id
    - See Example 29
    - Aside from assigning a todo to a certain user, we can also get all of the todos created by a user
        - user.getTodos(<where object to filter todos>)
            - Sequelize gives us a method to get whatever model we create with this method; it also adds the 's' at the end
            - So it really looks like .get<model name>s(<where object to filter todos>)
    - See Example 30
    
Associating Users with Their Todo
    - Note: To get to work, I had to remove the custom validators in todo.js (thanks Andrew!)
    - Problem: we can still GET all of the todos, regardless of whatever user is logged in!
    - Will fix in next lecture
    - See Example 31 for changes/additions

Associating Users with Their Todo, Pt. 2
    - Updated code to only show user-specific todos for logged in users when doing a GET, PUT, and DELETE request
    - See Example 32
    
Logging Users Out - Part 1
    - Right now in server.js, when we log a user in, all we do is check to see if the user exists and if they do, we generate a token for them
        - Problem: We aren't keeping track of generated tokens
            - If you wanted to log out, there's no way of doing it
            - If someone else gets your token, then it'll still be seen as valid
    - By storing tokens in our database, we can log out users, and then delete them from the database so they can no longer be used
    - We're going to create a token model (token.js) so that sequelize can store the tokens properly
        - To be more specific, we;re storing the hash of the token
            - You don't want to store unencrypted or not hashed information directly in the database
    - See Example 33
    
Logging Users Out - Part 2
    - 2 big things left to do
        - Update middleware.js
            - Right now, it doesn't care if the token we pass in is even in the database or not
            - Thw whole point is to only use valid tokens in the database
        - Add a new route
            - We need to add a route to delete a login instance
    - See Example 34
    - Some features to maybe add later:
        - Can add an Angular front end if you like
        - Can turn this into a mobile app, using the same API if you wish (Android, iOS w/ Swift, etc.)
        - Adding a due date to tasks
            - Figure out how to use dates in Sequelize and check to see when a task is past its due date
        - Send an email to someone when they sign up
            - Can use the Postmark API
            - ~2500 emails on Free tier
    
    
 
                                  Examples
                                  --------
                            
Example 1 - GET all todos (show in Postman)
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}];

app.get("/", function (req, res) {
    res.send("Todo API Root");
});

// GET /todos
app.get("/todos", function(req, res) {
    res.json(todos);
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a GET request
    - Type in "http://localhost:3000/todos"
    - Hit Send and see results
        - Should display your todos neatly
        
        
Example 2 - Get individual TODO, send to Postman
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}, {
    id: 3,
    description: "Finish this video",
    completed: true
}];

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});


Example 3 - POST request example
---------
var express = require("express");
var bodyParser = require("body-parser");

var app = express();
var PORT = process.env.PORT || 3000;
var todos = [];

app.use(bodyParser.json());

// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    console.log(`description: ${body.description}`);
    res.json(body);
});


app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a POST request
    - Type in "{{apiUrl}}/todos"
    - Underneath, click on Body->raw, and change the dropdown to "application/json"
    - In the provided area, type:
        - {
	         "description": "Walk the dog",
	         "completed": false
          }
    - Hit Send and see results
        - Should display the exact same JSON you typed in
        - Console should display "description: Walk the dog"
        
        
Example 4 - Create a new todo item using REST API
---------
var express = require("express");
var bodyParser = require("body-parser");

var app = express();
var PORT = process.env.PORT || 3000;
var todos = [];
var todoNextId = 1;

app.use(bodyParser.json());

app.get("/", function (req, res) {
    res.send("Todo API Root");
});

// GET /todos
app.get("/todos", function(req, res) {
    res.json(todos);
});

// GET /todos:id
app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    // iterate over todos array, find the match
    //if do, send res.json with match
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    
    //add id field
    body.id = todoNextId++;
    
    //push body in array
    todos.push(body);
    
    res.json(body);
});


app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a POST request
    - Type in "{{apiUrl}}/todos"
    - Underneath, click on Body->raw, and change the dropdown to "application/json"
    - In the provided area, type:
        - {
	         "description": "Walk the dog",
	         "completed": false
          }
    - Hit Send
    - In the provided area again, type:
        - {
	         "description": "something else",
	         "completed": true
          }
    - Hit Send
    - Go to GET request and see results
        - Should display all your todos that you made :-D
        
        
Example 5 - Refactoring getting todos with Underscore
---------
From:

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    // iterate over todos array, find the match
    //if do, send res.json with match
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

To:

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    matched !== undefined? res.json(matched) : res.status(404).send();
});

        
Example 6 - Refactoring posting/creating todos with Underscore (adding validation)
---------
// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    
    if(!_.isBoolean(body.completed) || !_.isString(body.description) || body.description.trim().length === 0)
        return res.status(400).send(); // 400 = bad data sent
    
    //add id field
    body.id = todoNextId++;
    //push body in array
    todos.push(body);
    
    res.json(body);
});


Example 7 - Delete Todo By ID
---------
app.delete("/todos/:id", function(request, response) {
    var todoID = parseInt(request.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    if(matched === undefined)
        response.status(400).send();
    else
    {
        var newTodos = _.without(todos, matched);
        todos = newTodos;
        response.json(matched);
    }
});


Example 8 - Updating Todos By ID
---------
app.put("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    var body = _.pick(req.body, "description", "completed");
    var validAttributes = {}; // items we want to add to todo
    
    if(!matched)
        return res.status(404).send(); // With send, it automatically stop below code from executing
    
    if(body.hasOwnProperty("completed") && _.isBoolean(body.completed))
        validAttributes.completed = body.completed;
    else if(body.hasOwnProperty("completed")) // entered a property, but it's bad input (not a boolean)
    {   
        return res.status(400).send();
    }
           
    if(body.hasOwnProperty("description") && _.isString(body.description) && body.description.trim().length > 0)
        validAttributes.description = body.description;
    else if(body.hasOwnProperty("description")) // entered a description, but it's bad input
    {  
        return res.status(400).send();
    }
    
    // matched gets changed explicitly because objects in Javascript are pass by reference
    _.extend(matched, validAttributes); 
    
    res.json(matched);
});


Example 9 - Passing variables by Reference
---------
//Object Example
var person = {
    name: "Mike",
    age: 21
};

function updatePerson(obj) {
    --INCORRECT--
    // obj = {
    //    name: "Mike",
    //    age: 23
    // };
    
    --CORRECT--
    obj.age = 23;
}

updatePerson(person);
console.log(person);

// Array Example
var grades = [15, 37];

function addGrades(gradesArr)
{
    // gradesArr = [15, 37, 99]; --INCORRECT--
    gradesArr.push(99);          --CORRECT--
}

addGrades(grades);
console.log(grades);


Example 10 - Query Parameters - Search By Completed Status
----------
// GET /todos?completed=true
app.get("/todos", function(req, res) {
    var queryParams = req.query;
    var filteredTodos = todos;

    if(queryParams.hasOwnProperty("completed") && queryParams.completed === 'true')
        filteredTodos = _.where(filteredTodos, {completed: true});
    else if(queryParams.hasOwnProperty("completed") && queryParams.completed === 'false')
        filteredTodos = _.where(filteredTodos, {completed: false}); 
   
    res.json(filteredTodos);
});


Example 11 - Searching Todo By Desription
----------
// GET /todos?completed=true&q=house
app.get("/todos", function(req, res) {
    var queryParams = req.query;
    var filteredTodos = todos;

    if(queryParams.hasOwnProperty("completed") && queryParams.completed === 'true')
        filteredTodos = _.where(filteredTodos, {completed: true});
    else if(queryParams.hasOwnProperty("completed") && queryParams.completed === 'false')
        filteredTodos = _.where(filteredTodos, {completed: false}); 
        
    // did !== instead of > -1 
    // toLowerCase to fix case sensitivity
    if(queryParams.hasOwnProperty("q") && queryParams.q.length > 0)
        filteredTodos = _.filter(filteredTodos, function(todo) {
            return todo.description.toLowerCase().indexOf(queryParams.q.toLowerCase()) !== -1? true : false; 
        });
    
    res.json(filteredTodos);
});


Example 12 - A Small Sequelize Example
----------
var Sequelize = require("sequelize");
var sequelize = new Sequelize(undefined, undefined, undefined, {
    "dialect": "sqlite",
    "storage": "basic-sqlite-database.sqlite"
});

var Todo = sequelize.define('todo', {
    description: {
        type: Sequelize.STRING
    },
    completed: {
        type: Sequelize.BOOLEAN
    }
});

sequelize.sync().then(function() {
    console.log("Everything is synced");
});

    - *NOTE* in the lecture, there is output showing the SQL statements needed to make what we did, but it doesn't show up on mine. To add it, change sync to:
        - sequelize.sync({logging: console.log})
        - Adding force: true forces sequelize to drop tables if they exist, before re-creating them


Example 13 - Another Sequelize Example - Creating an Entry
----------
var Sequelize = require("sequelize");
var sequelize = new Sequelize(undefined, undefined, undefined, {
    "dialect": "sqlite",
    "storage": __dirname + "/basic-sqlite-database.sqlite"
});

var Todo = sequelize.define('todo', {
    description: {
        type: Sequelize.STRING
    },
    completed: {
        type: Sequelize.BOOLEAN
    }
});

sequelize.sync({logging: console.log}).then(function() {
    console.log("Everything is synced");
    
    Todo.create({
        description: "Walking my dog",
        completed: false
    }).then(function(todo) {
        console.log("Finished!");
        console.log(todo);
    });
});


Example 14 - Some Sequelize Features
----------
var Sequelize = require("sequelize");
var sequelize = new Sequelize(undefined, undefined, undefined, {
    "dialect": "sqlite",
    "storage": __dirname + "/basic-sqlite-database.sqlite"
});

var Todo = sequelize.define('todo', {
    description: {
        type: Sequelize.STRING,
        allowNull: false,
        validate: {
            len: [1, 250] // makes description have to be a length between 1 and 250 characters
        }
    },
    completed: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false // If a status isn't provided, make it false by default
    }
});

sequelize.sync({/*force: true,*/ logging: console.log}).then(function() {
    console.log("Everything is synced");
    
    Todo.findById(3).then(function(todo) {
        console.log(todo? todo.toJSON() : "No todo found!");
    });
    
    Todo.create({
        description: "Take out trash"
    }).then(function(todo) {
        return Todo.create({
            description: "Clean room"
        });
    }).then(function () {
        // return Todo.findById(1);
        return Todo.findAll({
            where: {
                description: {
                    $like: "%Room%"
                }
            }
        });
    }).then(function(todos) {
        if(todos)
        {
            todos.forEach(function (todo) {
                console.log(todo.toJSON());
            });
        }
        else
            console.log("No todo found!");
    }).catch(function (e) {
        console.log(e);
    });
});


Example 15 - POST using Sequelize database
----------
// POST /todos
app.post("/todos", function(req, res) {
    var body = _.pick(req.body, "description", "completed");
    
    db.todo.create(body).then(function(todo) {
        res.json(todo);
    }).catch(function(e) {
        res.status(400).json(e); 
    });
});


Example 16 - GET todo by ID using Sequelize
----------
// GET /todos:id
app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = db.todo.findById(todoID).then(function(todo) {
        todo !== null? res.json(todo) : res.status(404).send(); // Could also do !!todo?
    }).catch(function() {
        res.status(500).send(); 
    });
});

Example 17 - GET todos + Query Parameters with Sequelize
----------
// GET /todos?completed=true&q=house
app.get("/todos", function(req, res) {
    var query = req.query;
    var where = {};
    
    if(query.hasOwnProperty("completed") && query.completed === 'true')
        where.completed = true;
    else if(query.hasOwnProperty("completed") && query.completed === 'false')
        where.completed = false;
    if(query.hasOwnProperty("q") && query.q.length > 0)
        where.description = {$like: "%" + query.q + "%"};
    db.todo.findAll({where: where}).then(function(todos) {
        res.json(todos);
    }).catch(function(e) {
        res.status(500).send();
    });
});


Example 18 - Environment Variables - Production vs Deployment
----------
var env = process.env.NODE_ENV || "development";
var sequelize;

if(env === "production") // only true when running on heroku
{
    sequelize = new Sequelize(process.env.DATABASE_URL, {
        dialect: "postgres"
    });
}
else
{
    sequelize = new Sequelize(undefined, undefined, undefined, {
    "dialect": "sqlite",
    "storage": __dirname + "/data/dev-todo-api.sqlite"
    });
}


Example 19 - Delete a todo by ID
----------
// DELETE /todos/:id
app.delete("/todos/:id", function(request, response) {
    var todoID = parseInt(request.params.id, 10);
    db.todo.findById(todoID).then(function(todo) {
        if(todo !== null)
        {
            todo.destroy().then(function() {
                response.status(204).send(); // Everything went well and there's nothing to send back
            });
        }
        else
            response.status(404).json({error: "No todo with that ID!"});
    }).catch(function() {
        response.status(500).send(); 
    });
});

// ALTERNATE METHOD (Andrew's way)
db.todo.destroy({
    where: {
        id: todoID
    }
}).then(function (rowsDeleted) {
    if(rowsDeleted === 0)
    {
        res.status(404).json({ error: "No todo with that ID!"});
    }
    else
    {
        res.status(204).send(); // Everything went well and there's nothing to send back
    }
}, function() {
    res.status(500).send();
});


Example 20 - Update a todo by ID
----------
// PUT /todos/:id
app.put("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var body = _.pick(req.body, "description", "completed");
    var attributes = {}; // items we want to add to todo
    
    if(body.hasOwnProperty("completed"))
        attributes.completed = body.completed;
           
    if(body.hasOwnProperty("description"))
        attributes.description = body.description;
    
    db.todo.findById(todoID).then(function(todo) {
        if(todo)
        {
            todo.update(attributes).then(function(todo) { // update was successful
                res.json(todo.toJSON());
            }, function(e) {      // update failed
                res.status(400).json(e);
            });
        }
        else
            res.status(404).send();
    }, function() {
        res.status(500).send();
    });
});


Example 21 - Creating a user
----------
// POST /users
app.post("/users", function(req, res) {
    var body = _.pick(req.body, "email", "password");
    
    db.user.create(body).then(function(user) {
        res.json(user);
    }).catch(function(e) {
        res.status(400).json(e); 
    });
});


Example 22 - Hooks Example
----------
{
    hooks: {
        beforeValidate: function(user, options) {
            if(typeof user.email === "string")
                user.email = user.email.toLowerCase();
        }
    }
}


Example 23 - Hash/Salt Setup (user.js)
----------
salt: {
  type: DataTypes.STRING  
},
password_hash: {
    type: DataTypes.STRING
},
password: {
    type: DataTypes.VIRTUAL,
    allowNull: false,
    validate: {
        len: [7, 100] // password is 7-100 characters
    },
    set: function(value) { // Apparently this gets called when we try to add the password
        var salt = bcrypt.genSaltSync(10); // # salt rounds
        var hashedPassword = bcrypt.hashSync(value, salt); // value you want hashed, salt to add to hash

        this.setDataValue("password", value);               // Sets the password to the plaintext password
        this.setDataValue("salt", salt);                    // Sets the salt property to the generated salt
        this.setDataValue("password_hash", hashedPassword); // Sets the hashed password to the password_hash for display
    }
}


Example 24 - Hide password data from public
----------

user.js
-------
instanceMethods: {
    toPublicJSON: function() {
        var json = this.toJSON();
        return _.pick(json, "id", "email", "updatedAt", "createdAt");
    }
}

server.js
---------
// POST /users
app.post("/users", function(req, res) {
    var body = _.pick(req.body, "email", "password");
    
    db.user.create(body).then(function(user) {
        res.json(user.toPublicJSON());        // Only shows id, email, createdAt, updatedAt; password/salt/hash are in database
    }).catch(function(e) {
        res.status(400).json(e); 
    });
});


Example 25 - Getting user from email and password
----------
// POST /users/login
app.post("/users/login", function(req, res) {
    var body = _.pick(req.body, "email", "password");
    var where = {email: body.email};
    
    if(typeof body.email !==  "string" || typeof body.password !== "string")
        return res.status(400).send();
    
    db.user.findOne({where: where}).then(function(user) {
        if(!user || !bcrypt.compareSync(body.password, user.get("password_hash"))) // !user is the same as user === null
            return res.status(401).send();
        res.json(user.toPublicJSON());
    }, function(e) {
        res.status(500).send();
    });
});


Example 26 - Refactoring By Custom Sequelize Methods
----------

    user.js
    -------
    classMethods: {
        authenticate: function(body) {
            return new Promise(function (resolve, reject) {
                var where = {email: body.email};

                if(typeof body.email !==  "string" || typeof body.password !== "string")
                    return reject();

                user.findOne({where: where}).then(function(user) {
                    if(!user || !bcrypt.compareSync(body.password, user.get("password_hash")))
                        return reject();
                    resolve(user);
                }, function(e) {
                    reject();
                });
            });
        }
    },

    server.js
    ---------
    // POST /users/login
    app.post("/users/login", function(req, res) {
        var body = _.pick(req.body, "email", "password");

        db.user.authenticate(body).then(function(user) {
            res.json(user.toPublicJSON());
        }, function() {
            res.status(401).send();
        });
    });
    

Example 27 - Generating a JWT Token
----------
generateToken: function(type) {
    // create a new, encrypted token that gets returned back to the user
    if(!_.isString(type))
        return undefined;
    try
    {
        // takes user's id and type, and turns in into a JSON string
        var stringData = JSON.stringify({id: this.get("id"), type: type}); 
        
        //take user's id and token type, and encrypt both
        var encryptedData = cryptojs.AES.encrypt(stringData, "abc123!!").toString();
        
        var token = jwt.sign({
            token: encryptedData
        }, "qwerty123");
        return token;
    }
    catch(e)
    {
        return undefined; // no valid token generated
    }
}

    In server.js (POST /users/login)
    ------------
    res.header("Auth", user.generateToken("authentication")).json(user.toPublicJSON());

    To Test In Postman
    ------------------
        - First, create a user (POST /users)
        - Then, enter the same info to log them in (POST /users/login)
        - When you get a response, check the "Headers" tab
            - Should see an 'Auth' section with a looonng string
                - Contains info such as time issued, user's id, type of token (authentication)


Example 28 - Making Todo Routes Private
----------

    middleware.js
    -------------
    module.exports = function(db) { 
        return {
            requireAuthentication: function(req, res, next) {
                var token = req.get("Auth"); // Get out token
                db.user.findByToken(token).then(function (user) { // Find a user by the token (custom method we made)
                    // Add a user to the request object; Let's us access user inside of each individual request
                    req.user = user;
                    next();
                }, function() {
                   res.status(401).send(); 
                }); 
            }    
        };
    };

    user.js (class methods section)
    -------
    findByToken: function(token) {
        return new Promise(function(resolve, reject) {
            try
            {
                // Checks token and make sure it hasn't been modified/is the same
                var decodedJWT = jwt.verify(token, "qwerty123");
                // decrypt the data
                var bytes = cryptojs.AES.decrypt(decodedJWT.token, "abc123!!");
                // Convert bytes to JSON data
                var tokenData = JSON.parse(bytes.toString(cryptojs.enc.Utf8));
                // now we have the data as a JSON object, that contains the ID and the Type; Now we simply search by ID
                user.findById(tokenData.id).then(function(user) {
                    if(user)
                        resolve(user);
                    else
                        reject();
                }, function(e) {
                    reject();
                });
            }
            catch(e)
            {
                reject();
            }
        });
    }

    server.js (a few examples)
    ----------
    app.get("/todos", middleware.requireAuthentication, function(req, res) {...}
    app.get("/todos/:id", middleware.requireAuthentication, function(req, res) {...}
    app.post("/todos", middleware.requireAuthentication, function(req, res) {...}
    
    Testing in Postman
    ------------------
        - Try posting a todo (Get a 401 - Unauthorized)
        - Create a user (post /users)
        - Login with that user (post /users/login)
        - Try adding, getting, deleting a todo (should work now that you're logged in)


Example 29 - Associate Todo with a User
----------
var User = sequelize.define("user", {
    email: Sequelize.STRING // shorthand for email: {type: Sequelize.STRING}
});

Todo.belongsTo(User); // User = model that the todo belongs to
User.hasMany(Todo);

sequelize.sync({force: true, logging: console.log}).then(function() {
    console.log("Everything is synced");
    
    User.create({
        email: "michael@example.com"
    }).then(function() {
        return Todo.create({
            description: "Clean yard"
        });
    }).then(function (todo) {
        User.findById(1).then(function (user) {
            user.addTodo(todo);
        });
    });
});

    - Then open DB Browser and look at the "Browse Data" tab
    
    
Example 30 - Associate User with a todo/filter them
----------
sequelize.sync({/*force: true, */logging: console.log}).then(function() {
    console.log("Everything is synced");
    
    User.findById(1).then(function(user) {
        user.getTodos({where: {completed: false}}).then(function (todos) {
            todos.forEach(function (todo) {
                console.log(todo.toJSON());
            });
        });
    });
});


Example 31 - Associating Users w/ Todos - POST
----------

    db.js
    -----
    db.todo.belongsTo(db.user);
    db.user.hasMany(db.todo);

    server.js
    ---------
    // POST /todos
    app.post("/todos", middleware.requireAuthentication, function(req, res) {
        var body = _.pick(req.body, "description", "completed");

        db.todo.create(body).then(function(todo) {
            req.user.addTodo(todo).then(function() {
               return todo.reload();    // We reload because the todo above is different than the one in the database
            }).then(function (todo) {   // This is the updated todo
               res.json(todo.toJSON());          // Then we do as before
            });
        }, function(e) {
            res.status(400).json(e); 
        });
    });
    
    
Example 32 - Associating Users w/ Todos - GET, PUT, DELETE
----------
// GET /todos?completed=true&q=house
app.get("/todos", middleware.requireAuthentication, function(req, res) {
    var query = req.query;
    var where = {userId: req.user.get('id')};
    ...
    
// GET /todos:id
app.get("/todos/:id", middleware.requireAuthentication, function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = db.todo.findOne({
        where: {
            id: todoID,
            userId: req.user.get("id")
        }
    ...
    
// PUT /todos/:id
app.put("/todos/:id", middleware.requireAuthentication, function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var body = _.pick(req.body, "description", "completed");
    var attributes = {}; // items we want to add to todo
    
    ...
    
    db.todo.findOne({
        where: {
            id: todoID,
            userId: req.user.get("id")
        }
    ...
    
// DELETE /todos/:id
app.delete("/todos/:id", middleware.requireAuthentication, function(request, response) {
    var todoID = parseInt(request.params.id, 10);
    db.todo.destroy({
        where: {
            id: todoID,
            userId: request.user.get("id")
        }
    ...
    
Example 33 - Logging Users Out - Setup Part 1
----------

    token.js
    --------
    var cryptojs = require("crypto-js");

    module.exports = function(sequelize, DataTypes) {
        return sequelize.define("token", {
           token: {
               type: DataTypes.VIRTUAL,
               allowNull: false,
               validate: {
                   len: [1] //valid if token length it greater than 1
               },
               set: function(value) {
                   var hash = cryptojs.MD5(value).toString();
                   this.setDataValue("token", value);
                   this.setDataValue("tokenHash", hash);
               }
           },
           tokenHash: DataTypes.STRING
        });
    }

    server.js
    ---------
    app.post("/users/login", function(req, res) {
        var body = _.pick(req.body, "email", "password");
        var userInstance;

        db.user.authenticate(body).then(function(user) {
            var token = user.generateToken("authentication");
            userInstance = user;
            return db.token.create({
                token: token // though the token is saved here, the HASH is what gets made and put in the database
            });
        }).then(function(tokenInstance){
            res.header("Auth", tokenInstance.get('token')).json(userInstance.toPublicJSON());
        }).catch(function(e) {
            console.log("e", e);
            res.status(401).send();
        });
    });


Example 34 - Logging Users Out - Setup Part 2
----------

    middleware.js
    -------------
    var cryptojs = require("crypto-js");

    module.exports = function(db) { 
        return {
            requireAuthentication: function(req, res, next) {
                var token = req.get("Auth") || "";

                db.token.findOne({ // find token in the database that user provided
                    where: {
                        tokenHash: cryptojs.MD5(token).toString()
                    }
                }).then(function(tokenInstance) {
                    if(!tokenInstance) // If there is no token
                        throw new Error();
                    // save token to request object
                    req.token = tokenInstance;
                    return db.user.findByToken(token);
                }).then(function(user) {
                    req.user = user; // set user object to request object
                    next();
                }).catch(function() {
                    res.status(401).send();
                });
            }    
        };
    };

    server.js
    ---------
    // DELETE /users/login
    app.delete("/users/login", middleware.requireAuthentication, function(req, res) {
        req.token.destroy().then(function() {
            res.status(204).send();
        }).catch(function() {
            res.status(500).send();
        });
    });
