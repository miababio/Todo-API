                                    NOTES
                                    -----
                                    
Installing Postman
    - Make API requests quickly, so you don't have to keep typing URLs and whatnot
    - Requires Chrome for extension (unless you do standalone app I think)
    
Getting All TODOs
    - For this project, a TODO will be a Model
        - An individual unit that you can have multiple of
        - Contains an id, description, and completion
    - Multiple TODOs will be called a "TODO Collection"
        - All of our TODOs
    - Need a way to get all of our todos:
        - Use a GET request
        - GET <url>
            - Common syntax
            - In this case -> Get /todos
    - Get an individual TODO
        - GET /todos:id
            - Represents a variable that will be passed in
        - This is where ID comes in
    - GET example
        - app.get("/todos", function(req, res) {
              res.json(todos);
          });
          
          - Need to convert our todos array/objects into JSON first
          - Use the .json(<what you want to convert>) method
          - That way, when someone calls our API, it gives them back JSON data
          
    - GET all todos + Postman
        - See Example 1
        - In Postman, after you get results, you see it also returned with a Staus (200 OK)
            - Statuses are always returned with HTTP reuquests
            - Ex: 404 (Page not found)
        - Postman also gives you the time it took to do the request
    - To speed the process up:
        - Save your request into a Collection
            - For Request name, it helps to put the actual request
            - For Collection -> Todo API
            
Get Todo By ID
    - GET /<plural version of whatever>:id
        - We're using :id because that's how Express parses the indivdual data 
        
    - Ex: app.get("/todos/:id", function(req, res) {
             res.send(`Asking for todo with ID of ${req.params.id}`); 
          });
            
        - req.params = parameters of the request, with "id" being one of them
        - In Postman, to se this in action, you could type -> http://localhost:3000/todos/3
            - This returns "Asking for todo with ID of 3"
        - This is neat because you can essentialy put anything after the slash
            - Ex: http://localhost:3000/todos/Mike, http://localhost:3000/todos/9999
        - Express takes whatever value that's after the slash, and lets me access that through req.params
        
    - Get individual ID and send it to Postman
        - See Example 2
        - res.status(<enter number here>).send(); is from Express
    - NOTE: todos[i].id === todoID
        - req.params.whatever will always return a STRING
            - This is why === didn't work before. You were trying to check a number against a string, and === is strict checking
            
Postman Environments
    - Will let you create multiple environments so you can test code on your local server, as well the the Heroku app
    - Hit the gear icon next to Environments
        - Click Add
        - There you can add a keyword (environment variable) and give it a value (key/value)
            - Ex: Key: apiUrl, Value: http://localhost:3000
    - Once added, you can use the environment variables to test your requests, instead of having to go up and switch the url back and forth like before
        - Ex: GET http://localhost:3000/todos now becomes -> GET {{apiUrl}}/todos
    - To use the environment variable, you surround it in curly braces
        - {{<environment_variable_here>}}

Creating New Todos
    - Going to let users add their own todos through the API
        - using the POST request
    - POSTs is different than GETs
        - POST can take data (such as todo descriptions, todo completion status)
        - This let's us send a JSON object with out request, so when the server receives the request, it can directly add that JSON data to the todos array
        
    - app.post("/todos", function(req, res) {
    
      });
      
        - We're going to have acces to whatever data was sent with the request. To handle it, need to install body-parser(npm)
            - Version 1.13.3, latest is 1.15.2
            
    - app.use(bodyParser.json());
    
        - This let's us use what ever JSON gets sent in the request
            - using req.body
    - See Example 3
        - Basically, takes the data we entered and spits it back out
    - Create a new todo item using the REST API
        - See Example 4
    - Note there are things wron with the code:
        - No Validation: Anything can be added to the todos array at this point
        - No checking completion status: Whether data was added successfully or not
        - Error handling?
        - Will these EVER get solved?!?!?
            - Tune in next time...
            
Refactoring with Underscore
    - (push to heroku when you get home)
    - Utility library that let's us manage objects, arrays, etc. better
        - Functional programming methods and whatnot (find, filter, map, etc)
    - Using current version (1.8.3)
        - Side Note: Adding '^' before a version in package.json indicates that when you fetch your modules from npm, it will only update to a newer version if it's a minor update.
            - Ex: ^1.8.3
                - If 1.8.4 came out, package.json would update to that
                - If 2.1.5 came out (major change), package.json would NOT update to that
    - Most use the "_" character to use the underscore variable
        - var _ = require("underscore");
    - Use underscore to refactor our current methods of getting todos by ID, and posting todos
    - See Example 5
    - We're also using underscore to add validation when creating and posting todos
        - See Example 6
    - Still getting the issue that we can POST whatever data we want to the todos
        - Ex: In postman, type:
        
            {
                "description": "Visit family and friends",
                "completed": true,
                "hack": "Some bad data"
            }
            
              and it's valid!

Underscore Challenge
    - How to get rid of data we don't want?
        - Use the pick() method (from Underscore library)
        - pick(<object>, <key(s) you want to accept (string)>)
            - Returns a copy of the same object, except filtered to only show the values you whitelisted as keys
            - Ex: var body = _.pick(req.body, "description", "completed");      

Deleting Todos By ID
    - Using the DELETE api method
        - app.delete(<url> <callback_function(req, res){} )
    - See Example 7
    - Similar to what we did with GET (getting a todo by ID)
    - push to heroku
    
Updating Todos
    - Use the PUT method
        - Similar setup to POST
    - We don't necessarily have to check if the todo exists, BUT if it does, we have to make sure it meets certain standards
    - Using the method "hasOwnProperty" helps chack for validation that a property exists
        - Ex: body.hasOwnProperty("completed") // Checks to see if this property exists
            - Returns a boolean
    - Using the extend(<dest>, <source>) method to copy/overwrite one object to another
        - Ex: _.extend(matched, validAttributes);
    - See Example 8
    
Passing Variables By Reference
    - 
    
 
                                  Examples
                                  --------
                            
Example 1 - GET all todos (show in Postman)
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}];

app.get("/", function (req, res) {
    res.send("Todo API Root");
});

// GET /todos
app.get("/todos", function(req, res) {
    res.json(todos);
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a GET request
    - Type in "http://localhost:3000/todos"
    - Hit Send and see results
        - Should display your todos neatly
        
        
Example 2 - Get individual TODO, send to Postman
---------
var express = require("express");
var app = express();
var PORT = process.env.PORT || 3000;
var todos = [{
    id: 1,
    description: "Meet dad for lunch",
    completed: false
}, {
    id: 2,
    description: "Go to the store",
    completed: false
}, {
    id: 3,
    description: "Finish this video",
    completed: true
}];

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});


Example 3 - POST request example
---------
var express = require("express");
var bodyParser = require("body-parser");

var app = express();
var PORT = process.env.PORT || 3000;
var todos = [];

app.use(bodyParser.json());

// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    console.log(`description: ${body.description}`);
    res.json(body);
});


app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a POST request
    - Type in "{{apiUrl}}/todos"
    - Underneath, click on Body->raw, and change the dropdown to "application/json"
    - In the provided area, type:
        - {
	         "description": "Walk the dog",
	         "completed": false
          }
    - Hit Send and see results
        - Should display the exact same JSON you typed in
        - Console should display "description: Walk the dog"
        
        
Example 4 - Create a new todo item using REST API
---------
var express = require("express");
var bodyParser = require("body-parser");

var app = express();
var PORT = process.env.PORT || 3000;
var todos = [];
var todoNextId = 1;

app.use(bodyParser.json());

app.get("/", function (req, res) {
    res.send("Todo API Root");
});

// GET /todos
app.get("/todos", function(req, res) {
    res.json(todos);
});

// GET /todos:id
app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    // iterate over todos array, find the match
    //if do, send res.json with match
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    
    //add id field
    body.id = todoNextId++;
    
    //push body in array
    todos.push(body);
    
    res.json(body);
});


app.listen(PORT, function() {
   console.log(`Express listening on port ${PORT}!`);
});

    In Postman
    ----------
    - Select a POST request
    - Type in "{{apiUrl}}/todos"
    - Underneath, click on Body->raw, and change the dropdown to "application/json"
    - In the provided area, type:
        - {
	         "description": "Walk the dog",
	         "completed": false
          }
    - Hit Send
    - In the provided area again, type:
        - {
	         "description": "something else",
	         "completed": true
          }
    - Hit Send
    - Go to GET request and see results
        - Should display all your todos that you made :-D
        
        
Example 5 - Refactoring getting todos with Underscore
---------
From:

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    // iterate over todos array, find the match
    //if do, send res.json with match
    var matched = null;
    for(var i = 0; i < todos.length; i++)
    {
        if(todos[i].id === todoID)
            matched = todos[i];
    }
    matched !== null? res.json(matched) : res.status(404).send();
});

To:

app.get("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    matched !== undefined? res.json(matched) : res.status(404).send();
});

        
Example 6 - Refactoring posting/creating todos with Underscore (adding validation)
---------
// POST /todos
app.post("/todos", function(req, res) {
    var body = req.body;
    
    if(!_.isBoolean(body.completed) || !_.isString(body.description) || body.description.trim().length === 0)
        return res.status(400).send(); // 400 = bad data sent
    
    //add id field
    body.id = todoNextId++;
    //push body in array
    todos.push(body);
    
    res.json(body);
});


Example 7 - Delete Todo By ID
---------
app.delete("/todos/:id", function(request, response) {
    var todoID = parseInt(request.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    if(matched === undefined)
        response.status(400).send();
    else
    {
        var newTodos = _.without(todos, matched);
        todos = newTodos;
        response.json(matched);
    }
});


Example 8 - Updating Todos By ID
---------
app.put("/todos/:id", function(req, res) {
    var todoID = parseInt(req.params.id, 10);
    var matched = _.findWhere(todos, {id: todoID});
    var body = _.pick(req.body, "description", "completed");
    var validAttributes = {}; // items we want to add to todo
    
    if(!matched)
        return res.status(404).send(); // With send, it automatically stop below code from executing
    
    if(body.hasOwnProperty("completed") && _.isBoolean(body.completed))
        validAttributes.completed = body.completed;
    else if(body.hasOwnProperty("completed")) // entered a property, but it's bad input (not a boolean)
    {   
        return res.status(400).send();
    }
           
    if(body.hasOwnProperty("description") && _.isString(body.description) && body.description.trim().length > 0)
        validAttributes.description = body.description;
    else if(body.hasOwnProperty("description")) // entered a description, but it's bad input
    {  
        return res.status(400).send();
    }
    
    // matched gets changed explicitly because objects in Javascript are pass by reference
    _.extend(matched, validAttributes); 
    
    res.json(matched);
});